# API KEY1
apiVersion: passport/v1
kind: ApiKey
metadata:
  name: blog-secret-apikey
spec:
  name: Secret Api Key For Blog
  policies:
    - IdentityFullAccess
---
# API KEY2
apiVersion: passport/v1
kind: ApiKey
metadata:
  name: blog-client-apikey
spec:
  name: Public Api Key For Blog
  policies:
    - BucketFullAccess
---
# Author BUCKET
apiVersion: bucket/v1
kind: Schema
metadata:
  name: author
spec:
  title: Author
  description: Author of post
  acl:
    write: "true==true"
    read: "true==true"
  properties:
    email:
      title: email
      type: string
      description: "Email of your Author"
      options:
        position: left
    full_name:
      type: string
      title: full_name
      description: "Name of your Author"
      options:
        position: left
    profile_img:
      type: storage
      title: profile_img
      description: "Profile image of Author"
      options:
        position: right
    biographi:
      type: textarea
      title: biographi
      description: "Biographi of Author"
      options:
        position: bottom
  primary:
    - email
---
# Tag BUCKET
apiVersion: bucket/v1
kind: Schema
metadata:
  name: tag
spec:
  title: Tag
  description: Tag of post
  acl:
    write: "true==true"
    read: "true==true"
  properties:
    title:
      type: string
      description: "Title of your tag"
      options:
        position: left
    description:
      type: textarea
      description: "Description of tag"
      options:
        position: right
  primary:
    - title
---
# Category BUCKET
apiVersion: bucket/v1
kind: Schema
metadata:
  name: category
spec:
  title: Category
  description: Category of post
  acl:
    write: "true==true"
    read: "true==true"
  properties:
    title:
      type: string
      description: "Title of your category"
      options:
        position: left
    description:
      type: textarea
      description: "Description of category"
      options:
        position: right
  primary:
    - title
---
# Home Page Settings BUCKET
apiVersion: bucket/v1
kind: Schema
metadata:
  name: home-page-settings
spec:
  title: Home Page Settings
  description: Configure the order of the sections etc.
  acl:
    write: "true==true"
    read: "true==true"
  properties:
    title:
      type: string
      description: "Title of your initialize home page settings"
      options:
        position: left
    header:
      type: storage
      description: "Header image"
      options:
        position: right
    contact_mail:
      type: string
      description: "Contact mail"
      options:
        position: left
    section1:
      type: relation
      description: "By which category are posts visible in this section?"
      options:
        position: bottom
      relationType: onetoone
      bucket:
        resourceFieldRef:
          schemaName: category
    section2:
      type: relation
      description: "By which category are posts visible in this section?"
      options:
        position: bottom
      relationType: onetoone
      bucket:
        resourceFieldRef:
          schemaName: category
    section3:
      type: relation
      description: "By which category are posts visible in this section?"
      options:
        position: bottom
      relationType: onetoone
      bucket:
        resourceFieldRef:
          schemaName: category
    socialmedia:
      type: object
      description: "Social media"
      options:
        position: bottom
      properties:
        facebook:
          type: string
          title: facebook
          description: "Facebook address"
          options:
            position: bottom
        twitter:
          type: string
          title: twitter
          description: "Twitter address"
          options:
            position: bottom
        instagram:
          type: string
          title: instagram
          description: "Instagram address"
          options:
            position: bottom
        youtube:
          type: string
          title: youtube
          description: "Youtube address"
          options:
            position: bottom
        pinterest:
          type: string
          title: pinterest
          description: "Pinterest adress"
          options:
            position: bottom
  primary:
    - title
---
# Post BUCKET
apiVersion: bucket/v1
kind: Schema
metadata:
  name: post
spec:
  title: Post
  description: Blog post
  acl:
    write: "(auth.identifier==document.author.email)"
    read: "true==true"
  properties:
    title:
      type: string
      description: "Title of your post"
      options:
        position: left
    header_img:
      type: storage
      description: "Image of post"
      options:
        position: right
    created_at:
      type: date
      description: "Create date of post"
      options:
        position: left
      default: ":created_at"
    category:
      type: relation
      description: "Category of post"
      options:
        position: left
      relationType: onetoone
      bucket:
        resourceFieldRef:
          schemaName: category
    tags:
      type: relation
      description: "Tags of post"
      options:
        position: left
      relationType: onetomany
      bucket:
        resourceFieldRef:
          schemaName: tag
    author:
      type: relation
      description: "Author of post"
      options:
        position: left
      relationType: onetoone
      bucket:
        resourceFieldRef:
          schemaName: author
    description:
      type: richtext
      description: "Content of post"
      options:
        position: right
  primary:
    - title
---
# FUNCTION
apiVersion: function/v1
kind: Function
metadata:
  name: blog
spec:
  title: Identity operation
  description: Create and delete author identity automatically
  timeout: 10
  code: ./function/triggers.js
  runtime:
    name: Node
    language: Javascript
  environment:
    - name: API_KEY
      valueFrom:
        resourceFieldRef:
          apiKeyName: blog-secret-apikey
  dependency:
    - name: "@spica-devkit/identity"
      version: latest
---
# TRIGGER - CREATE IDENTITY
apiVersion: function/v1
kind: Trigger
metadata:
  name: trigger-create-identity
spec:
  name: createIdentity
  func: blog
  type: bucket
  bucketOptions:
    bucket:
      resourceFieldRef:
        schemaName: author
    type: INSERT
---
# TRIGGER - DELETE IDENTITY
apiVersion: function/v1
kind: Trigger
metadata:
  name: trigger-delete-identity
spec:
  name: deleteIdentity
  func: blog
  type: bucket
  bucketOptions:
    bucket:
      resourceFieldRef:
        schemaName: author
    type: DELETE
